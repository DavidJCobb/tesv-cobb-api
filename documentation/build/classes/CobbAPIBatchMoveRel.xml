<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<class name="CobbAPIBatchMoveRel">
   <blurb>
      Functions for moving references in bulk, optionally with an offset relative to the target.
   </blurb>
   <description>
      <p>
         This API allows you to move references in bulk, optionally with local offsets.
      </p>
      <p>
         To use the API, you call a function to create a BatchMoveRel task; this function returns a 
         numeric "handle," which is like a ticket that you can exchange to access your task. Once 
         you have a handle, you can use additional functions to configure your task, and then call a 
         final function to run the task and receive results.
      </p>
      <p>
         A task can only be configured or used by the same Papyrus call stack that created it; you 
         can't pass a handle to some other part of your mod and operate on it later. If the call stack 
         runs to completion without actually using or canceling its task handle, that handle will be 
         cleaned up when the game is next saved or loaded.
      </p>
   </description>
   <methods>
      <method name="AddOperation">
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
            <arg type="ObjectReference" name="akSubject">
               The reference to move.
            </arg>
            <arg type="ObjectReference" name="akTarget">
               The reference that <var>akSubject</var> should be moved to.
            </arg>
            <arg type="Float[]" name="afPositionOffset">
               Three floats specifying an offset from <var>akTarget</var>'s position. 
               <var>akSubject</var> will be moved to the position of <var>akTarget</var> plus this 
               offset. This argument is required, but if you don't want an offset, a quick shortcut 
               is to pass <code>new Float[3]</code>.
            </arg>
            <arg type="Float[]" name="afRotationOffset">
               Three floats specifying an offset from <var>akTarget</var>'s rotation, relative to 
               <var>akTarget</var>'s rotation. <var>akSubject</var> will be rotated to match.
            </arg>
         </args>
         <blurb>
            Queues a reference to move to another reference.
         </blurb>
      </method>
      <method name="AddOperationAroundPoint">
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
            <arg type="ObjectReference" name="akSubject">
               The reference to move.
            </arg>
            <arg type="ObjectReference" name="akAnchor">
               A reference that exists in the same space (i.e. the same worldspace or cell) that 
               <var>akSubject</var> should be moved to.
            </arg>
            <arg type="Float[]" name="afTargetPosition">
               A world-relative position to move <var>akSubject</var> to.
            </arg>
            <arg type="Float[]" name="afTargetRotation">
               A rotation to serve as a reference frame when applying position and rotation offsets.
            </arg>
            <arg type="Float[]" name="afPositionOffset">
               Three floats specifying an offset from <var>akTarget</var>'s position. 
               <var>akSubject</var> will be moved to the position of <var>akTarget</var> plus this 
               offset. This argument is required, but if you don't want an offset, a quick shortcut 
               is to pass <code>new Float[3]</code>.
            </arg>
            <arg type="Float[]" name="afRotationOffset">
               Three floats specifying an offset from <var>akTarget</var>'s rotation, relative to 
               <var>akTarget</var>'s rotation. <var>akSubject</var> will be rotated to match.
            </arg>
         </args>
         <blurb>
            Queues a reference to move to a point in space.
         </blurb>
         <example-data>
            <comment>
               This code moves kSubject 64 units below the target point, because we specify an 
               offset 64 units above, but the target rotation is upside-down.
               
               We're moving within the same cell, so the subject can be its own anchor.
            </comment>
            <raw>
Float fTargetPos = new Float[3]
Float fTargetRot = new Float[3]
Float fOffsetPos = new Float[3]
fTargetRot[0] = 180
fOffsetPos[2] = 64
            </raw>
            <call>
               <arg value="iHandle" />
               <arg value="kSubject" />
               <arg value="kSubject" />
               <arg value="fTargetPos" />
               <arg value="fTargetRot" />
               <arg value="fOffsetPos" />
               <arg value="new Float[3]" />
            </call>
         </example-data>
      </method>
      <method name="AddOperationSpecial">
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
            <arg type="ObjectReference" name="akSubject">
               The reference to move.
            </arg>
            <arg type="ObjectReference" name="akTarget">
               The reference that <var>akSubject</var> should be moved to.
            </arg>
            <arg type="Float[]" name="afPositionOffset">
               Three floats specifying an offset from <var>akTarget</var>'s position. 
               <var>akSubject</var> will be moved to the position of <var>akTarget</var> plus this 
               offset. This argument is required, but if you don't want an offset, a quick shortcut 
               is to pass <code>new Float[3]</code>.
            </arg>
            <arg type="Float[]" name="afRotationOffset">
               Three floats specifying an offset from <var>akTarget</var>'s rotation, relative to 
               <var>akTarget</var>'s rotation. <var>akSubject</var> will be rotated to match.
            </arg>
            <arg type="Int" name="aiOperationType">
               <table>
                  <thead>
                     <tr>
                        <th>Value</th>
                        <th>Behavior</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <th>0</th>
                        <td>
                           A normal operation. The subject reference is moved to the target reference, 
                           with a position offset applied as appropriate.
                        </td>
                     </tr>
                     <tr>
                        <th>1</th>
                        <td>
                           If the subject reference is a load door, its destination door's teleport 
                           marker (so, the marker on the same side as the subject) is moved instead.
                        </td>
                     </tr>
                     <tr>
                        <th>2</th>
                        <td>
                           Your specified coordinates and target are ignored. The subject reference 
                           is moved back to its editor location.
                        </td>
                     </tr>
                     <tr>
                        <th>3</th>
                        <td>
                           We compute the offset from <var>akSubject</var>'s editor location to 
                           <var>akTarget</var>'s editor location, and move the subject in order to 
                           maintain that offset from the target's current position.
                        </td>
                     </tr>
                     <tr>
                        <th>4</th>
                        <td>
                           If the subject reference is a load door, then we compute the offset from 
                           its editor position to the editor position of its destination's teleport 
                           marker (so, the teleport marker on the same side as the subject). We then 
                           move the teleport marker to maintain that offset.
                        </td>
                     </tr>
                  </tbody>
               </table>
            </arg>
         </args>
         <blurb>
            Queues a reference to move to another reference.
         </blurb>
         <description>
            <p>
               Queues a reference to move. The <var>aiOperationType</var> argument changes the 
               behavior of this function.
            </p>
         </description>
      </method>
      <method name="AddOperationSpecialAroundPoint">
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
            <arg type="ObjectReference" name="akSubject">
               The reference to move.
            </arg>
            <arg type="ObjectReference" name="akAnchor">
               A reference that exists in the same space (i.e. the same worldspace or cell) that 
               <var>akSubject</var> should be moved to.
            </arg>
            <arg type="Float[]" name="afTargetPosition">
               A world-relative position to move <var>akSubject</var> to.
            </arg>
            <arg type="Float[]" name="afTargetRotation">
               A rotation to serve as a reference frame when applying position and rotation offsets.
            </arg>
            <arg type="Float[]" name="afPositionOffset">
               Three floats specifying an offset from <var>akTarget</var>'s position. 
               <var>akSubject</var> will be moved to the position of <var>akTarget</var> plus this 
               offset. This argument is required, but if you don't want an offset, a quick shortcut 
               is to pass <code>new Float[3]</code>.
            </arg>
            <arg type="Float[]" name="afRotationOffset">
               Three floats specifying an offset from <var>akTarget</var>'s rotation, relative to 
               <var>akTarget</var>'s rotation. <var>akSubject</var> will be rotated to match.
            </arg>
            <arg type="Int" name="aiOperationType">
               <table>
                  <thead>
                     <tr>
                        <th>Value</th>
                        <th>Behavior</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <th>0</th>
                        <td>
                           A normal operation. The subject reference is moved to the target reference, 
                           with a position offset applied as appropriate.
                        </td>
                     </tr>
                     <tr>
                        <th>1</th>
                        <td>
                           If the subject reference is a load door, its destination door's teleport 
                           marker (so, the marker on the same side as the subject) is moved instead.
                        </td>
                     </tr>
                     <tr>
                        <th>2</th>
                        <td>
                           Your specified coordinates and target are ignored. The subject reference 
                           is moved back to its editor location.
                        </td>
                     </tr>
                     <tr>
                        <th>3</th>
                        <td>
                           We compute the offset from <var>akSubject</var>'s editor location to 
                           <var>akTarget</var>'s editor location, and move the subject in order to 
                           maintain that offset from the target's current position.
                        </td>
                     </tr>
                     <tr>
                        <th>4</th>
                        <td>
                           If the subject reference is a load door, then we compute the offset from 
                           its editor position to the editor position of its destination's teleport 
                           marker (so, the teleport marker on the same side as the subject). We then 
                           move the teleport marker to maintain that offset.
                        </td>
                     </tr>
                  </tbody>
               </table>
            </arg>
         </args>
         <blurb>
            Queues a reference to move to a point in space.
         </blurb>
         <description>
            <p>
               Queues a reference to move. The <var>aiOperationType</var> argument changes the 
               behavior of this function.
            </p>
         </description>
      </method>
      <method name="Cancel">
         <blurb>
            Aborts a BatchMoveRel task, allowing its handle to be reused.
         </blurb>
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
         </args>
      </method>
      <method name="Create" returns="Int">
         <blurb>
            Creates a BatchMoveRel task, and returns its numeric handle.
         </blurb>
         <example-data>
            <call return-var="iHandle" />
            <raw>CobbAPIBatchMove.AddOperation(iHandle, kRefToMove, kMoveTo, new Float[3], new Float[3])</raw>
            <raw>CobbAPIBatchMove.Run(iHandle)</raw>
         </example-data>
      </method>
      <method name="Run" returns="ObjectReference[]">
         <blurb>
            Executes a BatchMoveRel task and returns an array of the references that were 
            successfully moved.
         </blurb>
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
         </args>
      </method>
      <method name="SetAlsoMoveTeleportMarkers">
         <args>
            <arg type="Int" name="aiHandle">
               The numeric handle for a BatchMoveRel task.
            </arg>
            <arg type="Int" name="aiWhich">
               <table>
                  <thead>
                     <tr>
                        <th>Value</th>
                        <th>Behavior</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <th>0</th>
                        <td>
                           The default. Do not modify load doors' teleport markers.
                        </td>
                     </tr>
                     <tr>
                        <th>1</th>
                        <td>
                           Move load doors' teleport markers in order to keep those markers in the same 
                           position relative to their doors.
                        </td>
                     </tr>
                     <tr>
                        <th>2</th>
                        <td>
                           Move load doors' teleport markers: compute the offset from the load door's 
                           editor position to the marker's editor position, and maintain that exact 
                           offset from the load door's new position.
                        </td>
                     </tr>
                  </tbody>
               </table>
            </arg>
         </args>
         <blurb>
            Controls how a BatchMoveRel operation handles load doors' teleport markers.
         </blurb>
         <description>
            <p>
               Controls how a BatchMoveRel operation handles load doors' teleport markers.
            </p>
         </description>
      </method>
   </methods>
</class>