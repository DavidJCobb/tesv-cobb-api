<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<class name="CobbAPIObjectReference">
   <blurb>
      Functions for working with ObjectReferences in general.
   </blurb>
   <concepts>
      <concept name="Changeflags" page="Changeflags" />
      <concept name="Load doors"  page="Load doors" />
   </concepts>
   <methods>
      <method name="BaseHasWhichKeyword" returns="Int">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Keyword[]" name="akKeywords" />
         </args>
         <blurb>
            Checks if the reference's base form has any of a list of keywords, and returns the 
            index of the first keyword it has. If the reference doesn't have any of the keywords 
            in the list, returns -1.
         </blurb>
         <related type="method" name="BaseHasWhichKeywordName" />
      </method>
      <method name="BaseHasWhichKeywordName" returns="Int">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="String[]" name="asKeywords" />
         </args>
         <blurb>
            Checks if the reference's base form has any of a list of keywords, and returns the 
            index of the first keyword it has. If the reference doesn't have any of the keywords 
            in the list, returns -1.
         </blurb>
         <related type="method" name="BaseHasWhichKeyword" />
      </method>
      <method name="GetActivateParents" returns="ObjectReference[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns an array of a reference's activate-parents.
         </blurb>
      </method>
      <method name="GetBounds" returns="Int[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns the OBND data (pre-generated by the Creation Kit's "Recalc Bounds" function) 
            in this format: [ iMinX, iMinY, iMinZ, iMaxX, iMaxY, iMaxZ ].
         </blurb>
      </method>
      <method name="GetChangeFlags" returns="Int">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns a reference's changeflags.
         </blurb>
         <example-data>
            <comment>
               Check whether the "MOVE" changeflag is set.
            </comment>
            <call return-var="iFlags">
               <arg value="kMyRef" />
            </call>
            <raw>
If Math.LogicalAnd(iFlags, 0x00000002)
   ;
   ; The flag is set.
   ;
EndIf
            </raw>
         </example-data>
         <related type="method" name="MarkChanged" />
         <related type="method" name="UnmarkChanged" />
      </method>
      <method name="GetCoordinates" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns a reference's position and rotation as an array of six floats.
         </blurb>
         <related type="method" name="GetPosition" />
         <related type="method" name="GetRotation" />
      </method>
      <method name="GetDestinationLoadDoor" returns="ObjectReference">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Given a load door, this function returns the other door to which it is linked.
         </blurb>
         <related type="method" name="GetTeleportMarkerCoordinates" />
         <related type="method" name="IsLoadDoor" />
         <related type="method" name="IsTeleportMarkerInAttachedCell" />
         <related type="method" name="MoveTeleportMarkerToEditorLocOffset" />
         <related type="method" name="ResetTeleportMarker" />
      </method>
      <method name="GetEnableStateChildren" returns="ObjectReference[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns an array of a reference's enable state children.
         </blurb>
      </method>
      <method name="GetFurnitureAllMarkerCoordinates" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Bool" name="abWorldRelative">
               If this argument is False, then the returned coordinates are relative to the 
               reference's model origin. If the argument is True, then the returned coordinates 
               are world-relative.
            </arg>
         </args>
         <blurb>
            Returns the coordinates of all furniture markers on a Furniture reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference, this function returns the coordinates of all 
               furniture markers as an array of floats, three per marker. The function fails if 
               the reference's 3D isn't loaded.
            </p>
         </description>
         <example-data>
            <call return-var="fCoordinates">
               <arg value="kMyRef" />
            </call>
            <comment>
               Get coordinates for the third marker:
            </comment>
            <raw>
fCoordinates = CobbAPIArray.SliceFloat(fCoordinates, 6 * 2, 6)
            </raw>
         </example-data>
         <related type="method" name="GetFurnitureAllMarkerEntryPoints" />
         <related type="method" name="GetFurnitureAllMarkerTypes" />
         <related type="method" name="GetFurnitureEnabledMarkers" />
         <related type="method" name="GetFurnitureMarkerCoordinates" />
         <related type="method" name="GetFurnitureMarkerEntryPoints" />
         <related type="method" name="GetFurnitureMarkerType" />
      </method>
      <method name="GetFurnitureAllMarkerEntryPoints" returns="Int[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns the entry points of all markers' entry points on a Furniture reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference, this function returns the entry points of all 
               furniture markers as an array of ints, five per marker. The function fails if 
               the reference's 3D isn't loaded.
            </p>
            <table class="narrow">
               <thead>
                  <tr>
                     <th>Array index</th>
                     <th>Entry point</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>5<var>n</var> + 0</td>
                     <td>Front</td>
                  </tr>
                  <tr>
                     <td>5<var>n</var> + 1</td>
                     <td>Back</td>
                  </tr>
                  <tr>
                     <td>5<var>n</var> + 2</td>
                     <td>Right</td>
                  </tr>
                  <tr>
                     <td>5<var>n</var> + 3</td>
                     <td>Left</td>
                  </tr>
                  <tr>
                     <td>5<var>n</var> + 4</td>
                     <td>Up</td>
                  </tr>
               </tbody>
            </table>
         </description>
         <example-data>
            <call return-var="iEntryPoints">
               <arg value="kMyRef" />
            </call>
            <comment>
               Get entry points for the third marker:
            </comment>
            <raw>
iEntryPoints = CobbAPIArray.SliceFloat(iEntryPoints, 5 * 2, 5)
            </raw>
         </example-data>
         <related type="method" name="GetFurnitureAllMarkerCoordinates" />
         <related type="method" name="GetFurnitureAllMarkerTypes" />
         <related type="method" name="GetFurnitureEnabledMarkers" />
         <related type="method" name="GetFurnitureMarkerCoordinates" />
         <related type="method" name="GetFurnitureMarkerEntryPoints" />
         <related type="method" name="GetFurnitureMarkerType" />
      </method>
      <method name="GetFurnitureAllMarkerTypes" returns="Int[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns the types of all markers' entry points on a Furniture reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference, this function returns an array of the types of all 
               furniture markers on the reference. The function fails if the reference's 3D 
               isn't loaded.
            </p>
            <table class="narrow">
               <thead>
                  <tr>
                     <th>Value</th>
                     <th>Meaning</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>0</td>
                     <td>Lean</td>
                  </tr>
                  <tr>
                     <td>1</td>
                     <td>Sit</td>
                  </tr>
                  <tr>
                     <td>2</td>
                     <td>Sleep</td>
                  </tr>
               </tbody>
            </table>
         </description>
         <related type="method" name="GetFurnitureAllMarkerCoordinates" />
         <related type="method" name="GetFurnitureAllMarkerEntryPoints" />
         <related type="method" name="GetFurnitureEnabledMarkers" />
         <related type="method" name="GetFurnitureMarkerCoordinates" />
         <related type="method" name="GetFurnitureMarkerEntryPoints" />
         <related type="method" name="GetFurnitureMarkerType" />
      </method>
      <method name="GetFurnitureEnabledMarkers" returns="Int[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns an array of the enabled furniture marker indices for the reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference, this function returns an array of indices 
               representing furniture markers that are flagged as "enabled" on the reference's 
               base form.
            </p>
            <p>
               Note also that a furniture marker can be "enabled" yet still have all of its 
               entry points disabled, rendering it unusable. This function still considers those 
               markers "enabled."
            </p>
         </description>
         <related type="method" name="GetFurnitureAllMarkerCoordinates" />
         <related type="method" name="GetFurnitureAllMarkerEntryPoints" />
         <related type="method" name="GetFurnitureAllMarkerTypes" />
         <related type="method" name="GetFurnitureMarkerCoordinates" />
         <related type="method" name="GetFurnitureMarkerEntryPoints" />
         <related type="method" name="GetFurnitureMarkerType" />
      </method>
      <method name="GetFurnitureMarkerCoordinates" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Int" name="aiMarker">
               The index of the furniture marker to check.
            </arg>
            <arg type="Bool" name="abWorldRelative">
               If this argument is False, then the returned coordinates are relative to the 
               reference's model origin. If the argument is True, then the returned coordinates 
               are world-relative.
            </arg>
         </args>
         <blurb>
            Returns the coordinates of a furniture marker on a Furniture reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference and a furniture marker index, this function returns 
               the marker's coordinates as an array of three floats. The function fails if the 
               reference's 3D isn't loaded.
            </p>
         </description>
         <related type="method" name="GetFurnitureAllMarkerCoordinates" />
         <related type="method" name="GetFurnitureAllMarkerEntryPoints" />
         <related type="method" name="GetFurnitureAllMarkerTypes" />
         <related type="method" name="GetFurnitureEnabledMarkers" />
         <related type="method" name="GetFurnitureMarkerEntryPoints" />
         <related type="method" name="GetFurnitureMarkerType" />
      </method>
      <method name="GetFurnitureMarkerEntryPoints" returns="Int[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Int" name="aiMarker">
               The index of the furniture marker to check.
            </arg>
         </args>
         <blurb>
            Returns an array of the entry points for a given furniture marker on a reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference and a furniture marker index, this function returns 
               an array of five ints representing the enabled entry points for that marker: a 
               value of 0 indicates that the entry point is disabled, and 1 indicates that it is 
               enabled. The function fails if the reference's 3D isn't loaded.
            </p>
            <table class="narrow">
               <thead>
                  <tr>
                     <th>Array index</th>
                     <th>Entry point</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>0</td>
                     <td>Front</td>
                  </tr>
                  <tr>
                     <td>1</td>
                     <td>Back</td>
                  </tr>
                  <tr>
                     <td>2</td>
                     <td>Right</td>
                  </tr>
                  <tr>
                     <td>3</td>
                     <td>Left</td>
                  </tr>
                  <tr>
                     <td>4</td>
                     <td>Up</td>
                  </tr>
               </tbody>
            </table>
         </description>
         <related type="method" name="GetFurnitureAllMarkerCoordinates" />
         <related type="method" name="GetFurnitureAllMarkerEntryPoints" />
         <related type="method" name="GetFurnitureAllMarkerTypes" />
         <related type="method" name="GetFurnitureEnabledMarkers" />
         <related type="method" name="GetFurnitureMarkerCoordinates" />
         <related type="method" name="GetFurnitureMarkerType" />
      </method>
      <method name="GetFurnitureMarkerType" returns="Int">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Int" name="aiMarker">
               The index of the furniture marker to check.
            </arg>
         </args>
         <blurb>
            Returns the type of a furniture marker on a Furniture reference.
         </blurb>
         <description>
            <p>
               Given a Furniture reference and a furniture marker index, this function returns 
               the marker's type. The function fails if the reference's 3D isn't loaded.
            </p>
            <table class="narrow">
               <thead>
                  <tr>
                     <th>Value</th>
                     <th>Meaning</th>
                  </tr>
               </thead>
               <tbody>
                  <tr>
                     <td>0</td>
                     <td>Lean</td>
                  </tr>
                  <tr>
                     <td>1</td>
                     <td>Sit</td>
                  </tr>
                  <tr>
                     <td>2</td>
                     <td>Sleep</td>
                  </tr>
               </tbody>
            </table>
         </description>
         <related type="method" name="GetFurnitureAllMarkerCoordinates" />
         <related type="method" name="GetFurnitureAllMarkerEntryPoints" />
         <related type="method" name="GetFurnitureAllMarkerTypes" />
         <related type="method" name="GetFurnitureEnabledMarkers" />
         <related type="method" name="GetFurnitureMarkerCoordinates" />
         <related type="method" name="GetFurnitureMarkerEntryPoints" />
      </method>
      <method name="GetHeadingOffsetPosition" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Float" name="afHeading" />
         </args>
         <blurb>
            Given a reference and the player's yaw angle, this function returns the position to 
            which the player would have to be moved in order to be looking directly at the 
            reference from a comfortable distance.
         </blurb>
      </method>
      <method name="GetMotionType" returns="Int">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            This function scans a reference's loaded 3D and returns its motion type. If the 
            reference has no 3D or no collision, the function returns 0. If the reference has 
            multiple rigid bodies with differing motion types, the function returns -1.
         </blurb>
         <related type="method" name="GetCoordinates" />
         <related type="method" name="GetRotation" />
      </method>
      <method name="GetPosition" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns a reference's position as an array of three floats.
         </blurb>
         <related type="method" name="GetCoordinates" />
         <related type="method" name="GetRotation" />
      </method>
      <method name="GetRotation" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns a reference's rotation as an array of three floats.
         </blurb>
         <related type="method" name="GetCoordinates" />
         <related type="method" name="GetPosition" />
      </method>
      <method name="GetTeleportMarkerCoordinates" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns, as an array of six floats, the position and rotation of the reference's far 
            teleport marker.
         </blurb>
         <related type="method" name="GetDestinationLoadDoor" />
         <related type="method" name="IsLoadDoor" />
         <related type="method" name="IsTeleportMarkerInAttachedCell" />
         <related type="method" name="MoveTeleportMarkerToEditorLocOffset" />
         <related type="method" name="ResetTeleportMarker" />
      </method>
      <method name="HasLocalCollision" returns="Bool">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns True if any bhkCollisionObject in the reference's loaded 3D has the 
            "Set Local" flag set. The function fails and logs an error if the reference's 3D 
            isn't loaded.
         </blurb>
         <related type="method" name="HasNiControllerManager" />
         <related type="method" name="Reload3D" />
         <related type="method" name="Unload3D" />
      </method>
      <method name="HasNiControllerManager" returns="Bool">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns True if the reference's loaded 3D has a NiControllerManager. The function 
            fails and logs an error if the reference's 3D isn't loaded.
         </blurb>
         <related type="method" name="HasLocalCollision" />
         <related type="method" name="Reload3D" />
         <related type="method" name="Unload3D" />
      </method>
      <method name="IsCleanlyMovable" returns="Bool">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns True if the reference can be moved "cleanly," or False if the reference's 
            moves will bleed across playthroughs when the player loads a save file.
         </blurb>
      </method>
      <method name="IsLoadDoor" returns="Bool">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns True if the reference is a load door, or False otherwise.
         </blurb>
         <related type="method" name="GetDestinationLoadDoor" />
         <related type="method" name="GetTeleportMarkerCoordinates" />
         <related type="method" name="IsTeleportMarkerInAttachedCell" />
         <related type="method" name="MoveTeleportMarkerToEditorLocOffset" />
         <related type="method" name="ResetTeleportMarker" />
      </method>
      <method name="IsMarker" returns="Bool">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Returns True if the reference's base form has the "is marker" flag set.
         </blurb>
      </method>
      <method name="IsTeleportMarkerInAttachedCell" returns="Bool">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="ObjectReference" name="akDestination">
               If you happen to already have a Papyrus variable pointing to the subject's 
               destination door, you can pass that variable as a micro-optimization.
            </arg>
         </args>
         <blurb>
            Returns True if the reference is a load door and its near teleport marker is in an 
            attached cell.
         </blurb>
         <related type="method" name="GetDestinationLoadDoor" />
         <related type="method" name="GetTeleportMarkerCoordinates" />
         <related type="method" name="IsLoadDoor" />
         <related type="method" name="MoveTeleportMarkerToEditorLocOffset" />
         <related type="method" name="ResetTeleportMarker" />
      </method>
      <method name="MakeCollisionPrimitiveBox" returns="Int">
         <args>
            <arg type="ObjectReference" name="akSubject">
               The reference to add a collision primitive to.
            </arg>
            <arg type="Int" name="aiCollisionLayer">
               The collision layer of the primitive.
            </arg>
            <arg type="Float[]" name="afHalfwidths">
               An array of three floats representing the halfwidths of the primitive.
            </arg>
         </args>
         <blurb>
            Adds a collision primitive to a reference, but does not update its 3D to actually 
            generate collision geometry.
         </blurb>
         <description>
            <p>
               This function attaches "collision primitive" data to a reference; this data 
               consists of a collision layer and the primitive's three halfwidths. This function 
               does not actually update the reference's 3D and will therefore not produce any 
               further changes on its own.
            </p>
            <p>
               This function will only work if the reference's base form is an Activator, and if 
               that Activator has a keyword with the (injected) form ID 0x00C0BB03.
            </p>
            <p>
               This function returns 0 if it fails, or 1 if it succeeds.
            </p>
         </description>
         <example-data>
            <comment>
               Add a NAVCUT primitive to a reference.
            </comment>
            <call return-var="iStatus">
               <arg value="kMyRef" />
               <arg value="49" />
               <arg value="fBoxDimensions" />
            </call>
            <comment>
               The precise timing for when the game actually generates collision from a primitive 
               remains unknown. The approach used in Cobb Positioner is to disable the reference, 
               re-enable it, wait for its 3D to load, and then move it to itself.
            </comment>
            <raw>
kMyRef.Disable()
kMyRef.Enable()
If !kMyRef.Is3DLoaded()
   ;
   ; Give the reference's 3D some time to (re)load.
   ;
   Int iWait = 0
   While iWait &lt; 5
      Utility.Wait(0.2)
      iWait += 1;
   EndWhile
EndIf
kMyRef.MoveTo(kMyRef)
            </raw>
         </example-data>
      </method>
      <method name="MarkChanged">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Int" name="aiFlags">
               A bitmask representing the flags to set.
            </arg>
         </args>
         <blurb>
            Directly sets changeflags on the reference.
         </blurb>
         <description>
            <p>
               This function directly tampers with a reference's "changeflags," indicating what 
               data gets written to the player's next savegame. The function is intended for 
               advanced use only.
            </p>
         </description>
         <example-data>
            <comment>
               Force the game to save the reference's "MOVE" and "HAVOK_MOVE" data.
            </comment>
            <call>
               <arg value="kMyRef" />
               <arg value="0x00000006" />
            </call>
         </example-data>
         <related type="method" name="GetChangeFlags" />
         <related type="method" name="UnmarkChanged" />
      </method>
      <method name="MoveTeleportMarkerToEditorLocOffset" returns="Float[]">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Take the offset from the near teleport marker's coordinates to the reference's 
            editor location. That offset will be applied to the reference's current location, 
            and the near teleport marker will be moved to the resulting coordinates.
         </blurb>
         <description>
            <p>
               Given a load door reference, this function behaves as follows: it takes the 
               offset from the near teleport marker's coordinates to the reference's editor 
               location; it applies that offset to the reference's current location; it then 
               moves the near teleport marker to the resulting coordinates.
            </p>
         </description>
         <related type="method" name="GetDestinationLoadDoor" />
         <related type="method" name="GetTeleportMarkerCoordinates" />
         <related type="method" name="IsLoadDoor" />
         <related type="method" name="IsTeleportMarkerInAttachedCell" />
         <related type="method" name="ResetTeleportMarker" />
      </method>
      <method name="Reload3D">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Forcibly unloads and reloads a reference's 3D. This function is experimental and may 
            break in yet-to-be-identified cases.
         </blurb>
         <related type="method" name="HasLocalCollision" />
         <related type="method" name="HasNiControllerManager" />
         <related type="method" name="Unload3D" />
      </method>
      <method name="ResetTeleportMarker">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Reset a load door's teleport marker to its original position.
         </blurb>
         <description>
            <p>
               Given a load door reference, this function returns its far teleport marker to 
               its original position, if it's been moved by functionality elsewhere in 
               CobbAPI.dll or CobbPos.dll. We cannot undo moves by other DLLs.
            </p>
         </description>
         <related type="method" name="GetDestinationLoadDoor" />
         <related type="method" name="GetTeleportMarkerCoordinates" />
         <related type="method" name="IsLoadDoor" />
         <related type="method" name="IsTeleportMarkerInAttachedCell" />
         <related type="method" name="MoveTeleportMarkerToEditorLocOffset" />
      </method>
      <method name="Unload3D">
         <args>
            <arg type="ObjectReference" name="akSubject" />
         </args>
         <blurb>
            Forcibly unloads a reference's 3D.
         </blurb>
         <related type="method" name="HasLocalCollision" />
         <related type="method" name="HasNiControllerManager" />
         <related type="method" name="Reload3D" />
      </method>
      <method name="UnmarkChanged">
         <args>
            <arg type="ObjectReference" name="akSubject" />
            <arg type="Int" name="aiFlags">
               A bitmask representing the flags to clear.
            </arg>
         </args>
         <blurb>
            Directly clears changeflags on the reference.
         </blurb>
         <description>
            <p>
               This function directly tampers with a reference's "changeflags," indicating what 
               data gets written to the player's next savegame. The function is intended for 
               advanced use only.
            </p>
         </description>
         <example-data>
            <comment>
               Force the game not to save the reference's "MOVE" and "HAVOK_MOVE" data.
            </comment>
            <call>
               <arg value="kMyRef" />
               <arg value="0x00000006" />
            </call>
         </example-data>
         <related type="method" name="GetChangeFlags" />
         <related type="method" name="MarkChanged" />
      </method>
   </methods>
</class>